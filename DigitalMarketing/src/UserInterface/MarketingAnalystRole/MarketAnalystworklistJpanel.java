/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.MarketingAnalystRole;

import Business.DMEcosystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.marketAnalystOrganization;
import Business.Organization.productAnalystOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import Business.WorkQueue.productDetailWorkRequest;
import UserInterface.ProductManagerRole.productManagerCreateTask;
import UserInterface.ProductManagerRole.productManagerViewTaskJpanel;
import java.awt.CardLayout;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dhava
 */
public class MarketAnalystworklistJpanel extends javax.swing.JPanel {

    /**
     * Creates new form MarketAnalystworklistJpanel
     */
    
       JPanel userProcessContainer;
   UserAccount account;
   //productManagerOrganization  organization;
  marketAnalystOrganization  organization;
   Enterprise enterprise;
   DMEcosystem business;
    
    public MarketAnalystworklistJpanel(JPanel userProcessContainer,UserAccount account,Organization organization,Enterprise enterprise,DMEcosystem business) {
        initComponents();
         this.userProcessContainer=userProcessContainer;
        this.account=account;
        this.organization=(marketAnalystOrganization)organization;
        this.enterprise=enterprise;
        this.business=business;
       populateRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbltasklist = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 800));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbltasklist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TaskID", "TaskName", "Task Description", "Task DueDate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbltasklist);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 203, 582, 303));

        btnSave.setBackground(new java.awt.Color(0, 153, 255));
        btnSave.setText("Evaluate Risk");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 203, 150, -1));

        btnBack.setBackground(new java.awt.Color(255, 255, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Double Left_100px.png"))); // NOI18N
        btnBack.setToolTipText("Back");
        btnBack.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        btnBack.setBorderPainted(false);
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBackMouseExited(evt);
            }
        });
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, 105, 76));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Market Analyst WorkList");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, 350, 70));
    }// </editor-fold>//GEN-END:initComponents

    
    public WorkRequest getRequest(String Taskid)
    {
        WorkRequest productDetailWorkRequest=null;
     
       for (Organization  oo: enterprise.getOrganizationDirectory().getOrganizationList()) 
       {
        for (WorkRequest request :oo.getWorkQueue().getWorkRequestList())
            {  
            
                if(request.getTaskID().equals(Taskid))
                {
                   productDetailWorkRequest=request;
                   break;
                }
               
                
            }
            
           
    }
       
        return productDetailWorkRequest;
 }
    
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
           int selectedRow=tbltasklist.getSelectedRow();
        if (selectedRow>=0)
        {
        
            String taskID=(String)tbltasklist.getValueAt(selectedRow,0);
            
           WorkRequest  request= getRequest(taskID);
            
            
            EvaluateRiskFactorsJPanel smn=new EvaluateRiskFactorsJPanel(userProcessContainer,account,request,enterprise,business);
            CardLayout cl=(CardLayout)userProcessContainer.getLayout();
            userProcessContainer.add("EvaluateRiskFactorsJPanel",smn);
            cl.next(userProcessContainer);
            // resetTextfield();
            
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Pleases select Row ");
        }
     
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseEntered
        // TODO add your handling code here:

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Double Left_100px2.png")));
        btnBack.setBorderPainted(false);
    }//GEN-LAST:event_btnBackMouseEntered

    private void btnBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseExited
        // TODO add your handling code here:
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Double Left_100px.png")));
    }//GEN-LAST:event_btnBackMouseExited

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed
   public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) tbltasklist.getModel();
        
        model.setRowCount(0);
        
      //  for (Organization o :enterprise.getOrganizationDirectory().getOrganizationList()) {
      for (Organization O:enterprise.getOrganizationDirectory().getOrganizationList())
      {
            for (WorkRequest request :O.getWorkQueue().getWorkRequestList())
            {  
                    Object[] row = new Object[4];
                    row[0] = request.getTaskID();
                    row[1] = request.getTitle();
                    row[2] = request.getDescription();
                    row[3] = request.getDuedate();

          //  row[1] = ()request.;
          //  row[2] = o.;
          //  row[3] = request.getDuedate();
                
             if(request.getAssignto() == account.getEmployee() && request.getStatus().equals("Assign to Market Analyst") )   
                   {
                       model.addRow(row);
                   }
                
            }
      }
   }
      //  }
        
       
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbltasklist;
    // End of variables declaration//GEN-END:variables
}
